# scarico le librerie
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scrapy as sc
import humanize

# PULIZIA file RIPARTIZIONI
with open('ripartizione-geografica_python.txt', 'r') as file:
    lines = file.readlines()
column_names = lines[0].strip().split('\t')
data = []
for line in lines[1:]:
    values = line.strip().split('\t')
    row_data = dict(zip(column_names, values))
    data.append(row_data)
df = pd.DataFrame(data)
df.to_csv('ripartizione-geografica_python.csv', index=False)
Ripartizione_geografica = pd.read_csv('ripartizione-geografica_python.csv')
Ripartizione_geografica.set_index('Codice Regione', inplace=True)
print(Ripartizione_geografica)


#PULIZIA file REGIUONI
# PULIZIA file REGIONI
file = "covid19_italy_region_python.csv"
dati = pd.read_csv(file)

dati['TestsPerformed'] = dati['TestsPerformed'].fillna(0) # Sostituzione valori NaN con 0 alla colonna test
dati['Date'] = pd.to_datetime(dati['Date']) # Data in formato data
dati.set_index('SNo', inplace=True) # Impostazione indice
dati.drop('Country', axis=1, inplace=True) # Cancella la colonna country, in quanto inutile

# Per pulizia si rinominano le colonne
nuove_colonne = {
    'HospitalizedPatients': 'In ospedale',
    'CurrentPositiveCases': 'Positivi',
    'IntensiveCarePatients': 'Ter_intensiva',
    'RegionCode': 'Code',
    'HomeConfinement': 'In Casa',
    'TestsPerformed': 'Test'
}

# Rinomina le colonne utilizzando il metodo rename()
dati.rename(columns=nuove_colonne, inplace=True)

# Rinomina il DataFrame come df_regioni
df_regioni = pd.DataFrame(dati)

# Stampa il DataFrame rinominato
print(df_regioni)


#PULIZIA file PROVINCE
# Pulizia PROVINCE
province = pd.read_csv("./covid19_italy_province_python.csv")
df_province = pd.DataFrame(province)

# Rimuovi la colonna "Country" direttamente dal DataFrame `province`
df_province.drop("Country", axis=1, inplace=True)

# Rimuovi i NaN dal DataFrame
df_province = df_province.dropna()

# Ordina il DataFrame in ordine alfabetico in base alle regioni
df_province = df_province.sort_values(by="RegionName")

# Calcola tutte le informazioni generali che possono essere utili
print(df_province.describe())



#PULIZIA file COMUNI 

try:
    # Carico il file Excel
    df_comuni = pd.read_excel('Comuni_python.xlsx')
    print("Caricamento del file Excel completato con successo!")
except Exception as e:
    print("Si Ã¨ verificato un errore durante il caricamento del file Excel:", e)

# Visualizzo le  informazioni sul DataFrame prima della pulizia
print("Informazioni sul DataFrame prima della pulizia:")
print(df_comuni.info())

# Seleziono solo le colonne rilevanti per l'analisi
colonne_rilevanti = ['Denominazione', 'Regione', 'Sigla automobilistica', 'Popolazione2011']
df_comuni = df_comuni[colonne_rilevanti]

# Ora faccio la gestione dei valori mancanti
# Conto i valori mancanti per ogni colonna
valori_mancanti = df_comuni.isnull().sum()
print("\nValori mancanti per ogni colonna:")
print(valori_mancanti)

# Elimino solo le righe con valori mancanti nelle colonne rilevanti
df_comuni.dropna(subset=colonne_rilevanti, inplace=True)

# Rimuovo la colonna senza nome, se presente
if 'Unnamed: 1' in df_comuni.columns:
    df_comuni.drop(columns=['Unnamed: 1'], inplace=True)

# Controllo se ci sono righe duplicate
righe_duplicate = df_comuni[df_comuni.duplicated()]
print("\nRighe duplicate:")
print(righe_duplicate)

# Visualizzo informazioni sul DataFrame dopo la pulizia
print("\nInformazioni sul DataFrame dopo la pulizia:")
print(df_comuni.info())

# Visualizzo statistiche di base per le colonne numeriche dopo la pulizia
print("\nStatistiche di base per le colonne numeriche dopo la pulizia:")
print(df_comuni.describe())

# Esegui il metodo describe() sul DataFrame
statistiche_base = df_comuni.describe()

# Estrai i valori di interesse
count = statistiche_base.loc['count', 'Popolazione2011']
mean = statistiche_base.loc['mean', 'Popolazione2011']
std = statistiche_base.loc['std', 'Popolazione2011']
min_value = statistiche_base.loc['min', 'Popolazione2011']
quartile_25 = statistiche_base.loc['25%', 'Popolazione2011']
quartile_50 = statistiche_base.loc['50%', 'Popolazione2011']
quartile_75 = statistiche_base.loc['75%', 'Popolazione2011']
max_value = statistiche_base.loc['max', 'Popolazione2011']

# Formattazione dei dati utilizzando la libreria humanize
formatted_count = humanize.intword(count)
formatted_mean = humanize.intcomma(round(mean, 2))
formatted_std = humanize.intcomma(round(std, 2))
formatted_min_value = humanize.intword(min_value)
formatted_quartile_25 = humanize.intword(quartile_25)
formatted_quartile_50 = humanize.intword(quartile_50)
formatted_quartile_75 = humanize.intword(quartile_75)
formatted_max_value = humanize.intword(max_value)

# Stampare i dati formattati
print("Statistiche di base per le colonne numeriche dopo la pulizia:")
print(f"Count: {formatted_count}")
print(f"Mean: {formatted_mean}")
print(f"Std: {formatted_std}")
print(f"Min: {formatted_min_value}")
print(f"25th Percentile: {formatted_quartile_25}")
print(f"50th Percentile: {formatted_quartile_50}")
print(f"75th Percentile: {formatted_quartile_75}")
print(f"Max: {formatted_max_value}")

# Raggruppo i dati per regione e calcolo la popolazione totale di ciascuna regione
popolazione_per_regione = df_comuni.groupby('Regione')['Popolazione2011'].sum()

# Normalizzo la popolazione per regione
popolazione_normalizzata = popolazione_per_regione / popolazione_per_regione.sum()

# Creo l'istogramma
plt.figure(figsize=(10, 6))
popolazione_normalizzata.plot(kind='bar', color='skyblue')
plt.title('Popolazione per Regione (Normalizzata)')
plt.xlabel('Regione')
plt.ylabel('Popolazione Normalizzata')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()



# Assicurati che la colonna 'Date' sia in formato datetime
df_regioni['Date'] = pd.to_datetime(df_regioni['Date'])

# Estrai il mese dalla colonna 'Date'
df_regioni['Month'] = df_regioni['Date'].dt.month

# Raggruppa per regione e mese e calcola la media del numero di persone "in ospedale"
df_media_ospedalizzati = df_regioni.groupby(['RegionName', 'Month'])['In ospedale'].mean().reset_index()

# Grafico andamento in ospedale in ciascuna regione per mese
plt.figure(figsize=(12, 8))
sns.lineplot(data=df_media_ospedalizzati, x='Month', y='In ospedale', hue='RegionName', marker='o')
plt.title('Andamento Medio "In Ospedale" per Regione (Mensile)')
plt.xlabel('Mese')
plt.ylabel('Numero Medio di Persone in Ospedale')
plt.xticks(range(1, 13), ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'], rotation=45)
plt.legend(title='Regione', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
